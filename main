-- Finalized Aim Assist + Silent Aim + Triggerbot Script with Full Feature Logic and Fixes

local config = getgenv().Script
local aimConfig = config and config["Aim assist"]
local silentConfig = config and config.SilentAim
local trigConfig = config and config.Triggerbot or {}

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local UserInputService = game:GetService("UserInputService")
local Camera = Workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

-- Aim Assist Config
local AimEnabled = aimConfig and aimConfig.Enabled
local AimSmooth = aimConfig and aimConfig.smoothing or 0.00125
local AimPart = aimConfig and aimConfig.AimPart or "HumanoidRootPart"
local AimType = aimConfig and aimConfig.Type or "Camera"
local AimFOV = aimConfig and aimConfig.FOV or 350
local AimShowFOV = aimConfig and aimConfig.ShowFOV or false
local AimKey = aimConfig and aimConfig.LockOnKey or Enum.KeyCode.C
local AimHold = aimConfig and aimConfig.HoldBind or false
local AimChecks = aimConfig and aimConfig.Checks or {}
local XShake = aimConfig and aimConfig.xshake or 0
local YShake = aimConfig and aimConfig.yshake or 0

-- Resolver
local ResolverMode = (aimConfig and aimConfig.Resolver and aimConfig.Resolver.Type) or (silentConfig and silentConfig.Resolver and silentConfig.Resolver.Type) or "None"
local ResolverEnabled = (aimConfig and aimConfig.Resolver and aimConfig.Resolver.Enabled) or (silentConfig and silentConfig.Resolver and silentConfig.Resolver.Enabled) or false
local ResolverToggleKey = (aimConfig and aimConfig.Resolver and aimConfig.Resolver.Keybind) or (silentConfig and silentConfig.Resolver and silentConfig.Resolver.Keybind) or Enum.KeyCode.R

-- Silent Aim Config
local SilentEnabled = silentConfig and silentConfig.Enabled
local SilentKey = silentConfig and silentConfig.Keybind or Enum.KeyCode.M
local SilentPred = silentConfig and silentConfig.Prediction or 3.19
local SilentTargetPart = silentConfig and silentConfig.TargetPart or "Head"
local SilentUseFov = silentConfig and silentConfig.UseFov or false
local SilentFovRadius = silentConfig and silentConfig.FOV or 155
local SilentSticky = silentConfig and silentConfig.StickyAim or false
local SilentShowTarget = silentConfig and silentConfig.SilentTarget or false
local SilentChecks = silentConfig and silentConfig.Checks or {}

-- State
local AimLocked = false
local AimTarget = nil
local SilentTarget = nil
local HoldingAim = false
local TriggerActive = false
local LastTriggerTime = 0

-- FOV Circle
local fovCircle = Drawing.new("Circle")
fovCircle.Thickness = 1.5
fovCircle.NumSides = 64
fovCircle.Filled = false
fovCircle.Transparency = 0.75
fovCircle.Color = Color3.fromRGB(255, 255, 255)
fovCircle.Visible = AimShowFOV or SilentUseFov
fovCircle.Radius = math.max(AimFOV, SilentFovRadius)

-- Target Label
local targetLabel = Drawing.new("Text")
targetLabel.Visible = false
targetLabel.Size = 16
targetLabel.Center = true
targetLabel.Outline = true
targetLabel.Color = Color3.fromRGB(255, 255, 255)
targetLabel.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2 + 30)

-- Utils
local function isAlive(player)
    local char = player.Character
    local hum = char and char:FindFirstChildOfClass("Humanoid")
    local ko = char and char:FindFirstChild("BodyEffects") and char.BodyEffects:FindFirstChild("K.O")
    return hum and hum.Health > 0 and (not ko or not ko.Value)
end

local function isVisible(part)
    if not part then return false end
    local origin = Camera.CFrame.Position
    local dir = (part.Position - origin).Unit * 999
    local rayParams = RaycastParams.new()
    rayParams.FilterDescendantsInstances = {LocalPlayer.Character}
    rayParams.FilterType = Enum.RaycastFilterType.Blacklist
    local result = Workspace:Raycast(origin, dir, rayParams)
    if not result then return true end
    return result.Instance:IsDescendantOf(part.Parent)
end

local function passesChecks(player, checks)
    if player == LocalPlayer or not player.Character then return false end
    local part = player.Character:FindFirstChild("HumanoidRootPart")
    if not part then return false end
    if checks.Alive and not isAlive(player) then return false end
    if checks.Team and player.Team == LocalPlayer.Team then return false end
    if checks.Visible and not isVisible(part) then return false end
    return true
end

local function applyResolver(pos, velocity)
    if not ResolverEnabled or ResolverMode == "None" then return pos end
    local factor = 0.13
    if ResolverMode == "Aggressive" then factor *= 1.5
    elseif ResolverMode == "Safe" then factor *= 0.75 end
    return pos + (velocity * factor)
end

local function getClosestTarget(checks, radius)
    local closest, shortest = nil, math.huge
    local mouse = UserInputService:GetMouseLocation()
    for _, player in ipairs(Players:GetPlayers()) do
        if passesChecks(player, checks) then
            local part = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
            if part then
                local screenPos, onScreen = Camera:WorldToViewportPoint(part.Position)
                if onScreen then
                    local dist = (Vector2.new(screenPos.X, screenPos.Y) - mouse).Magnitude
                    if (not radius or dist <= radius) and dist < shortest then
                        closest = player
                        shortest = dist
                    end
                end
            end
        end
    end
    return closest
end

-- Keybinds
UserInputService.InputBegan:Connect(function(input, gp)
    if gp then return end
    if input.KeyCode == AimKey and AimEnabled then
        if AimHold then
            HoldingAim = true
        else
            AimLocked = not AimLocked
            AimTarget = AimLocked and getClosestTarget(AimChecks, AimFOV) or nil
        end
    end
    if input.KeyCode == SilentKey and SilentEnabled then
        if SilentSticky then
            SilentTarget = SilentTarget and nil or getClosestTarget(SilentChecks, SilentFovRadius)
        else
            SilentTarget = nil
        end
    end
    if input.KeyCode == ResolverToggleKey then
        ResolverEnabled = not ResolverEnabled
        print("[Resolver] Toggled:", ResolverEnabled and "ENABLED" or "DISABLED")
    end
    if input.KeyCode == (trigConfig.Keybind or Enum.KeyCode.T) then
        if trigConfig.HoldToActivate then
            TriggerActive = true
        else
            TriggerActive = not TriggerActive
        end
    end
end)

UserInputService.InputEnded:Connect(function(input, gp)
    if gp then return end
    if input.KeyCode == AimKey and AimHold then
        HoldingAim = false
        AimTarget = nil
    end
    if input.KeyCode == (trigConfig.Keybind or Enum.KeyCode.T) and trigConfig.HoldToActivate then
        TriggerActive = false
    end
end)

-- Render Loop
RunService.RenderStepped:Connect(function()
    fovCircle.Visible = AimShowFOV or SilentUseFov
    fovCircle.Position = UserInputService:GetMouseLocation()
    fovCircle.Radius = math.max(AimFOV, SilentFovRadius)

    if (AimLocked or HoldingAim) and AimTarget and passesChecks(AimTarget, AimChecks) then
        local targetPart = AimTarget.Character:FindFirstChild(AimPart)
        if targetPart then
            local pos = applyResolver(targetPart.Position, targetPart.Velocity)
            if AimType == "Camera" then
                Camera.CFrame = Camera.CFrame:Lerp(CFrame.lookAt(Camera.CFrame.Position, pos), AimSmooth)
                if XShake > 0 or YShake > 0 then
                    local angleX = math.rad(math.random(-XShake, XShake))
                    local angleY = math.rad(math.random(-YShake, YShake))
                    Camera.CFrame *= CFrame.Angles(angleY, angleX, 0)
                end
            end
        end
    elseif HoldingAim then
        AimTarget = getClosestTarget(AimChecks, AimFOV)
    end

    if SilentEnabled and SilentShowTarget and SilentTarget then
        local name = SilentTarget.DisplayName ~= "" and SilentTarget.DisplayName or SilentTarget.Name
        targetLabel.Text = "Locked: " .. name
        targetLabel.Visible = true
    else
        targetLabel.Visible = false
    end

    if trigConfig.Enabled and TriggerActive and (tick() - LastTriggerTime >= (trigConfig.Cooldown or 0.1)) then
        local mouse = LocalPlayer:GetMouse()
        local target = mouse.Target
        if target then
            local model = target:FindFirstAncestorOfClass("Model")
            local player = model and Players:GetPlayerFromCharacter(model)
            if player and player ~= LocalPlayer then
                if trigConfig.TeamCheck and player.Team == LocalPlayer.Team then return end
                if trigConfig.VisibilityCheck and not isVisible(target) then return end
                if trigConfig.MaxDistance then
                    local dist = (Camera.CFrame.Position - target.Position).Magnitude
                    if dist > trigConfig.MaxDistance then return end
                end
                if math.random(1, 100) <= (trigConfig.HitChance or 100) then
                    mouse1press()
                    task.wait(0.05)
                    mouse1release()
                    LastTriggerTime = tick()
                end
            end
        end
    end
end)

-- Silent Aim Hook
getgenv().OriginalIndex = getgenv().OriginalIndex or hookmetamethod(game, "__index", function(obj, key)
    if SilentEnabled and (SilentTarget or not SilentSticky) and obj:IsA("Mouse") and (key == "Hit" or key == "Target") then
        local target = SilentSticky and SilentTarget or getClosestTarget(SilentChecks, SilentFovRadius)
        if target and target.Character and target.Character:FindFirstChild(SilentTargetPart) then
            local part = target.Character[SilentTargetPart]
            local predicted = part.Position + (part.Velocity * (SilentPred / 1000))
            local resolved = applyResolver(predicted, part.Velocity)
            if key == "Hit" then return CFrame.new(resolved) end
            if key == "Target" then return part end
        end
    end
    return getgenv().OriginalIndex(obj, key)
end)
