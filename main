local cfg = getgenv().Script and getgenv().Script.SilentAim
if not cfg or not cfg.Enabled then return end

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local UserInputService = game:GetService("UserInputService")
local Camera = Workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

-- Configs
local Prediction = cfg.SilentPred or 3.19
local UseFov = cfg.UseFov or true
local FovRadius = cfg.FOV or 120
local Resolver = cfg.Resolver or { Enabled = false, Type = "None", Keybind = Enum.KeyCode.R }
local Checks = cfg.Checks or { Alive = true, Visible = true, Team = true }

-- State
local ResolverEnabled = Resolver.Enabled

-- FOV Visual
local FovCircle = Drawing.new("Circle")
FovCircle.Radius = FovRadius
FovCircle.Thickness = 1.5
FovCircle.NumSides = 64
FovCircle.Color = Color3.fromRGB(255, 255, 255)
FovCircle.Filled = false
FovCircle.Transparency = 0.75
FovCircle.Visible = UseFov

-- Utility
local function isAlive(player)
    local char = player.Character
    local hum = char and char:FindFirstChildOfClass("Humanoid")
    local ko = char and char:FindFirstChild("BodyEffects") and char.BodyEffects:FindFirstChild("K.O")
    return hum and hum.Health > 0 and (not ko or not ko.Value)
end

local function isVisible(part)
    if not part then return false end
    local origin = Camera.CFrame.Position
    local dir = (part.Position - origin).Unit * 999

    local params = RaycastParams.new()
    params.FilterDescendantsInstances = {LocalPlayer.Character}
    params.FilterType = Enum.RaycastFilterType.Blacklist

    local result = Workspace:Raycast(origin, dir, params)
    if not result then return true end
    if result.Instance:IsDescendantOf(part.Parent) then return true end

    return false
end

local function passesChecks(player)
    if player == LocalPlayer then return false end
    if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then return false end
    if Checks.Alive and not isAlive(player) then return false end
    if Checks.Team and player.Team == LocalPlayer.Team then return false end
    if Checks.Visible and not isVisible(player.Character.HumanoidRootPart) then return false end
    return true
end

local function applyResolver(pos, velocity)
    if not ResolverEnabled then return pos end
    local factor = 0.13
    if Resolver.Type == "Aggressive" then factor *= 1.5 end
    if Resolver.Type == "Safe" then factor *= 0.75 end
    return pos + (velocity * factor)
end

local function getClosestTarget()
    local closest, shortest = nil, math.huge
    local mousePos = UserInputService:GetMouseLocation()

    for _, player in ipairs(Players:GetPlayers()) do
        if passesChecks(player) then
            local hrp = player.Character.HumanoidRootPart
            local screenPos, onScreen = Camera:WorldToViewportPoint(hrp.Position)
            if onScreen then
                local dist = (Vector2.new(screenPos.X, screenPos.Y) - mousePos).Magnitude
                if (not UseFov or dist <= FovRadius) and dist < shortest then
                    shortest = dist
                    closest = player
                end
            end
        end
    end

    return closest
end

-- Toggle Resolver
UserInputService.InputBegan:Connect(function(input, gp)
    if gp then return end
    if input.KeyCode == Resolver.Keybind then
        ResolverEnabled = not ResolverEnabled
        print("[Silent Aim Resolver] Toggled:", ResolverEnabled and "ON" or "OFF")
    end
end)

-- Hook into game calls
local oldNamecall
oldNamecall = hookmetamethod(game, "__namecall", function(self, ...)
    local args = {...}
    local method = getnamecallmethod()

    if cfg.Enabled and tostring(self) == "MainEvent" and method == "FireServer" then
        local target = getClosestTarget()
        if target and target.Character then
            local hrp = target.Character:FindFirstChild("HumanoidRootPart")
            if hrp then
                local pos = hrp.Position + (hrp.Velocity * Prediction)
                pos = applyResolver(pos, hrp.Velocity)
                args[2] = pos
                return oldNamecall(self, unpack(args))
            end
        end
    end

    return oldNamecall(self, ...)
end)

-- Update FOV circle
RunService.RenderStepped:Connect(function()
    FovCircle.Visible = UseFov
    FovCircle.Radius = FovRadius
    FovCircle.Position = UserInputService:GetMouseLocation()
end)
