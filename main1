local cfg = getgenv().Script and getgenv().Script.SilentAim
if not cfg or not cfg.Enabled then return end

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

-- Settings
local targetPart = cfg.TargetPart or "Head"
local prediction = cfg.Prediction or 3.19
local UseFov = cfg.UseFov or false
local FovRadius = cfg.FOV or 120
local ResolverEnabled = cfg.Resolver and cfg.Resolver.Enabled or false
local ResolverType = cfg.Resolver and cfg.Resolver.Type or "None"
local ToggleKey = cfg.Keybind or Enum.KeyCode.M
local Checks = cfg.Checks or {}

-- State
local SilentActive = cfg.Enabled
local lockedTarget = nil

-- FOV Circle
local fovCircle = Drawing.new("Circle")
fovCircle.Thickness = 1.5
fovCircle.NumSides = 64
fovCircle.Color = Color3.fromRGB(255, 255, 255)
fovCircle.Filled = false
fovCircle.Transparency = 0.75
fovCircle.Radius = FovRadius
fovCircle.Visible = UseFov

-- Utils
local function isAlive(player)
    local char = player.Character
    local hum = char and char:FindFirstChildOfClass("Humanoid")
    local ko = char and char:FindFirstChild("BodyEffects") and char.BodyEffects:FindFirstChild("K.O")
    return hum and hum.Health > 0 and (not ko or not ko.Value)
end

local function isVisible(part)
    local origin = Camera.CFrame.Position
    local dir = (part.Position - origin).Unit * 999
    local params = RaycastParams.new()
    params.FilterDescendantsInstances = {LocalPlayer.Character}
    params.FilterType = Enum.RaycastFilterType.Blacklist
    local result = workspace:Raycast(origin, dir, params)
    if not result then return true end
    return result.Instance:IsDescendantOf(part.Parent)
end

local function passesChecks(player)
    if player == LocalPlayer or not player.Character then return false end
    local hrp = player.Character:FindFirstChild("HumanoidRootPart")
    if not hrp then return false end
    if Checks.Alive and not isAlive(player) then return false end
    if Checks.Team and player.Team == LocalPlayer.Team then return false end
    if Checks.Visible and not isVisible(hrp) then return false end
    return true
end

local function applyResolver(pos, velocity)
    if not ResolverEnabled then return pos end
    local factor = 0.13
    if ResolverType == "Aggressive" then factor *= 1.5
    elseif ResolverType == "Safe" then factor *= 0.75 end
    return pos + (velocity * factor)
end

local function getClosestTarget()
    local closest, shortest = nil, math.huge
    local mouse = UserInputService:GetMouseLocation()

    for _, player in ipairs(Players:GetPlayers()) do
        if passesChecks(player) then
            local char = player.Character
            local part = char and char:FindFirstChild("HumanoidRootPart")
            if part then
                local screenPos, onScreen = Camera:WorldToViewportPoint(part.Position)
                if onScreen then
                    local dist = (Vector2.new(screenPos.X, screenPos.Y) - mouse).Magnitude
                    if (not UseFov or dist <= FovRadius) and dist < shortest then
                        closest = player
                        shortest = dist
                    end
                end
            end
        end
    end

    return closest
end

-- Resolver Toggle Key
UserInputService.InputBegan:Connect(function(input, gp)
    if gp then return end
    if input.KeyCode == ToggleKey then
        SilentActive = not SilentActive
        print("[Silent Aim] Toggled:", SilentActive and "ENABLED" or "DISABLED")
    end
end)

-- Hook: Mouse.Hit / Position spoofing
getgenv().OriginalIndex = getgenv().OriginalIndex or hookmetamethod(game, "__index", function(obj, key)
    if SilentActive and obj:IsA("Mouse") and (key == "Hit" or key == "Target") then
        local target = getClosestTarget()
        if target and target.Character and target.Character:FindFirstChild(targetPart) then
            local part = target.Character[targetPart]
            local predicted = part.Position + (part.Velocity * (prediction / 1000))
            local resolved = applyResolver(predicted, part.Velocity)
            if key == "Hit" then
                return CFrame.new(resolved)
            elseif key == "Target" then
                return part
            end
        end
    end
    return getgenv().OriginalIndex(obj, key)
end)

-- FOV Update
RunService.RenderStepped:Connect(function()
    fovCircle.Visible = UseFov
    fovCircle.Position = UserInputService:GetMouseLocation()
end)
