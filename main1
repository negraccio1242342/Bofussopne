-- Aim Lock Script (Cleaned, Fixed Visibility, Resolver Toggle)
local config = getgenv().Script and getgenv().Script["Aim assist"]
if not config or not config.Enabled then return end

--// Services
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local Camera = Workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

--// Config
local Smoothness = config.smoothing or 0.00125
local Shake = config.shake or 0
local LockKey = config.Keybind or Enum.KeyCode.N

-- Resolver Config
local ResolverMode = config.Resolver and config.Resolver.Type or "None"
local ResolverEnabled = config.Resolver and config.Resolver.Enabled or false
local ResolverToggleKey = config.Resolver and config.Resolver.Keybind or Enum.KeyCode.R

-- Checks
local Checks = config.Checks or {
    Alive = true,
    Team = true,
    Visible = true
}

--// State
local isLocked = false
local lockTarget = nil

--// Utilities
local function isAlive(player)
    local char = player.Character
    local hum = char and char:FindFirstChildOfClass("Humanoid")
    local ko = char and char:FindFirstChild("BodyEffects") and char.BodyEffects:FindFirstChild("K.O")
    return hum and hum.Health > 0 and (not ko or not ko.Value)
end

local function isVisible(targetPart)
    local origin = Camera.CFrame.Position
    local direction = (targetPart.Position - origin).Unit * 999
    local rayParams = RaycastParams.new()
    rayParams.FilterDescendantsInstances = {LocalPlayer.Character}
    rayParams.FilterType = Enum.RaycastFilterType.Blacklist

    local result = Workspace:Raycast(origin, direction, rayParams)

    if not result then return true end
    return result.Instance:IsDescendantOf(targetPart.Parent)
end

local function passesChecks(player)
    if player == LocalPlayer or not player.Character then return false end
    local hrp = player.Character:FindFirstChild("HumanoidRootPart")
    if not hrp then return false end

    if Checks.Alive and not isAlive(player) then return false end
    if Checks.Team and player.Team == LocalPlayer.Team then return false end
    if Checks.Visible and not isVisible(hrp) then return false end

    return true
end

local function applyResolver(player, position)
    if not ResolverEnabled or ResolverMode == "None" then return position end
    local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
    if not hrp then return position end

    local vel = hrp.Velocity
    local factor = 0.13
    if ResolverMode == "Aggressive" then
        factor = factor * 1.5
    elseif ResolverMode == "Safe" then
        factor = factor * 0.75
    end

    return position + (vel * factor)
end

local function getClosestTarget()
    local closest, shortest = nil, math.huge

    for _, player in ipairs(Players:GetPlayers()) do
        if passesChecks(player) then
            local hrp = player.Character.HumanoidRootPart
            local screenPos, onScreen = Camera:WorldToViewportPoint(hrp.Position)
            if onScreen then
                local mousePos = UserInputService:GetMouseLocation()
                local dist = (Vector2.new(screenPos.X, screenPos.Y) - mousePos).Magnitude
                if dist < shortest then
                    shortest = dist
                    closest = player
                end
            end
        end
    end

    return closest
end

--// Keybinds
UserInputService.InputBegan:Connect(function(input, gp)
    if gp then return end

    if input.KeyCode == LockKey then
        isLocked = not isLocked
        lockTarget = isLocked and getClosestTarget() or nil
    end

    if input.KeyCode == ResolverToggleKey then
        ResolverEnabled = not ResolverEnabled
        print("[Resolver] Toggled:", ResolverEnabled and "ENABLED" or "DISABLED")
    end
end)

--// Lock Loop
RunService.RenderStepped:Connect(function()
    if isLocked and lockTarget and passesChecks(lockTarget) then
        local hrp = lockTarget.Character:FindFirstChild("HumanoidRootPart")
        if hrp then
            local targetPos = applyResolver(lockTarget, hrp.Position)
            local camCF = Camera.CFrame
            local targetCF = CFrame.lookAt(camCF.Position, targetPos)
            Camera.CFrame = camCF:Lerp(targetCF, Smoothness)

            if Shake > 0 then
                local shakeVec = Vector3.new(
                    math.random(-Shake, Shake) * 0.001,
                    math.random(-Shake, Shake) * 0.001,
                    math.random(-Shake, Shake) * 0.001
                )
                Camera.CFrame = Camera.CFrame * CFrame.new(shakeVec)
            end
        end
    end
end)
